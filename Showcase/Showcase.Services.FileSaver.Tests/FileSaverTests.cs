using Microsoft.Extensions.Logging;
using Moq;
using Showcase.Services.FileImageSaver;
using System;
using System.Linq;
using Xunit;

namespace Showcase.Services.FileSaver.Tests
{
    public class FileSaverTests
    {
        [Fact]
        public void Create_File_Path_Pattern_Returns_Normal_File_Name()
        {

            var id = Guid.Parse("b06da2ab-56df-4072-90ee-1cff9dd181c3");

            var testGroup = "test";
            var pictureName = "test.png";
            var rootFolder = "wwwroot";
            var fakeLogger = Mock.Of<ILogger<FileImageSaverService>>();
            var fakeFileSaverService = new Mock<FileImageSaverService>(rootFolder, "images", fakeLogger);

            var expected = $"images/{id}/{testGroup}/{pictureName}";
            var expectedSavedPath = $"{rootFolder}/{id}/{testGroup}/{pictureName}";
            var (savePath, relativePath) = fakeFileSaverService.Object.GetFilePath(id, pictureName, testGroup);

            Assert.Equal(expected, relativePath);
            Assert.Equal(expectedSavedPath, savePath);
        }
        [Fact]
        public void Create_File_Path_Pattern_Returns_AutoGenerated_File_Name()
        {

            var id = Guid.Parse("b06da2ab-56df-4072-90ee-1cff9dd181c3");

            var testGroup = "test";
            var pictureName = new string('m', 41);
            var rootFolder = "wwwroot";

            var fakeLogger = Mock.Of<ILogger<FileImageSaverService>>();
            var fakeFileSaverService = new Mock<FileImageSaverService>(rootFolder, "images", fakeLogger);
            var (_, relativePath) = fakeFileSaverService.Object.GetFilePath(id, pictureName, testGroup);

            var fileName = relativePath.Split('/').Last();
            Assert.True(fileName.Length == id.ToString().Length);
        }

    }
}
